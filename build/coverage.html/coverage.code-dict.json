{"/home/travis/build/npmtest/node-npmtest-grunt-githooks/test.js":"/* istanbul instrument in package npmtest_grunt_githooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-githooks/lib.npmtest_grunt_githooks.js":"/* istanbul instrument in package npmtest_grunt_githooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_githooks = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_githooks = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-githooks/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-githooks && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_githooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_githooks\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_githooks.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_githooks.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_githooks.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_githooks.__dirname + '/lib.npmtest_grunt_githooks.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-githooks/node_modules/grunt-githooks/Gruntfile.js":"/*\n * grunt-githooks\n * https://github.com/rhumaric/grunt-githooks\n *\n * Copyright (c) 2013 Romaric Pascal\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        'lib/*.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp'],\n    },\n\n    copy: {\n      tests: {\n        files: [\n          {cwd: 'test/fixtures', src: '**', dest: 'tmp', expand: true}\n        ]\n      }\n    },\n\n    // Configuration to be run (and then tested).\n    githooks: {\n\n      // Actual target used to bind hooks for project development\n      'dev': {\n        'pre-commit': 'jshint'\n      },\n\n      // Test targets\n      // Default hook creation\n      'test.default': {\n        options: {\n          dest: 'tmp/default',\n        },\n        'pre-commit': 'aTask'\n      },\n\n      // Binding multiple tasks\n      'test.multiple_tasks': {\n        options: {\n          dest: 'tmp/multiple_tasks',\n        },\n        'pre-commit': 'aTask anotherTask'\n      },\n\n      'test.multipleHooks': {\n\n        options: {\n          dest: 'tmp/multipleHooks'\n        },\n        'pre-commit': 'aTask',\n        'commit-msg': 'anotherTask'\n      },\n\n      // Appending binding to and existing hook \n      'test.append': {\n        options: {\n          dest: 'tmp/append'\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.customTemplate': {\n        options: {\n          dest: 'tmp/customTemplate',\n          template: 'test/fixtures/custom-template.js.hb'\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.insert': {\n        options: {\n          dest: 'tmp/insert',\n          preventExit: true\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.customHashbang': {\n        options: {\n          dest: 'tmp/customHashbang',\n          hashbang: '#!/usr/bin/node'\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.withArguments': {\n        options: {\n          dest: 'tmp/withArguments',\n\t\t\t\t\targs: \"--test myargument\"\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.withQuotedArguments': {\n        options: {\n          dest: 'tmp/withQuotedArguments',\n          args: '--test \"foo \\'bar baz\\'\"'\n        },\n        'pre-commit': 'aTask'\n      },\n\n      'test.hookSpecificOptions': {\n\n        options: {\n          dest: 'tmp/hookSpecificOptions',\n          hashbang: '#!/usr/bin/node'\n        },\n        'pre-commit': {\n          taskNames: 'aTask',\n          template: 'test/fixtures/custom-template.js.hb'\n        }\n      },\n\n      'test.shellScript': {\n\n        options: {\n          dest: 'tmp/shellScript',\n          hashbang: '#!/bin/sh',\n          template: 'templates/shell.hb',\n          startMarker: '## GRUNT-GITHOOKS START',\n          endMarker: '## GRUNT-GITHOOKS END'\n        },\n        'pre-commit':'jshint'\n      },\n\n      'test.command': {\n        options: {\n          dest: 'tmp/command'\n        },\n        'pre-commit': {\n          command: '/usr/bin/grunt',\n          taskNames: 'aTask'\n        }\n      },\n\n      'test.noTaskNames': {\n        options: {\n          dest: 'tmp/noTaskNames'\n        },\n        'pre-commit': {\n          preventExit: true\n        }\n      },\n\n      // Test targets for logging validation\n      // Logs which tasks get bound to which hook\n      'logs.defaultLogging': {\n        options: {\n          dest: 'tmp/defaultLogging',\n        },\n        'pre-commit': 'aTask'\n      },\n\n      // Logs if the hook name does not correspond to a Git hook\n      'logs.warnIfNotValidHook': {\n        options: {\n          dest: 'tmp/warnIfNotValidHook',\n        },\n        'definitelyNotTheNameOfAGitHook': 'jshint'\n      },\n\n      // Fail if the existing hook does not have the appropriate scripting\n      // language\n      'fails.invalidScriptingLanguage': {\n        options: {\n          dest: 'tmp/invalidScriptingLanguage',\n        },\n        'pre-commit': 'jshint'\n      },\n\n      'fails.customHashbangInvalidScriptingLanguage': {\n        options: {\n          dest: 'tmp/customHashbangInvalidScriptingLanguage',\n          hashbang: '#!/usr/bin/node'\n        },\n        'pre-commit': 'jshint'\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js'],\n    },\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's test task(s), then test the result.\n  grunt.registerTask('test', (function () {\n    \n    var tasks = [\n      'clean', \n      'copy'\n    ];\n\n    for (var target in grunt.config.data.githooks) {\n      if(/^test\\./.test(target)){\n        tasks.push('githooks:'+target);\n      }\n    }\n  \n    tasks.push('nodeunit');\n\n    return tasks;\n  }()));\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n  // Dummy tasks used for testing\n  grunt.registerTask('aTask', function () {\n    console.log('Boom! Running a task!');\n  });\n  grunt.registerTask('anotherTask', function () {});\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-githooks/node_modules/grunt-githooks/lib/escapeBackslashes.handlebars.js":"'use strict';\n\nmodule.exports = function (object) {\n\n  return object.toString().replace(/\\\\/g,'\\\\\\\\').replace(/'/g,'\\\\\\'');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-githooks/node_modules/grunt-githooks/lib/githooks.js":"var fs = require('fs'),\n    path = require('path'),\n    handlebars = require('handlebars'),\n    escapeBackslashes = require('./escapeBackslashes.handlebars');\n\nhandlebars.registerHelper('escapeBackslashes', escapeBackslashes);\n\n/**\n * Class to help manage a hook\n * @class Hook\n * @module githooks\n * @constructor\n */\nfunction Hook(hookName, taskNames, options) {\n\n  /**\n   * The name of the hook\n   * @property hookName\n   * @type {String}\n   */\n  this.hookName = hookName;\n\n  /**\n   * The name of the tasks that should be run by the hook, space separated\n   * @property taskNames\n   * @type {String}\n   */\n  this.taskNames = taskNames;\n\n  /**\n   * Options for the creation of the hook\n   * @property options\n   * @type {Object}\n   */\n  this.options = options || {};\n\n  this.markerRegExp = new RegExp(this.options.startMarker.replace(/\\//g, '\\\\/') +\n                      '[\\\\s\\\\S]*' + // Not .* because it needs to match \\n\n                      this.options.endMarker.replace(/\\//g, '\\\\/'), 'm');\n}\n\nHook.prototype = {\n\n  /**\n   * Creates the hook\n   * @method create\n   */\n  create: function() {\n\n    var hookPath = path.resolve(this.options.dest, this.hookName);\n\n    var existingCode = this.getHookContent(hookPath);\n\n    if (existingCode) {\n      this.validateScriptLanguage(existingCode);\n    }\n\n    var hookContent;\n    if(this.hasMarkers(existingCode)) {\n      hookContent = this.insertBindingCode(existingCode);\n    } else {\n      hookContent = this.appendBindingCode(existingCode);\n    }\n\n    fs.writeFileSync(hookPath, hookContent);\n\n    fs.chmodSync(hookPath, '755');\n  },\n\n  /**\n   * Returns the content of the hook at given path\n   * @method getHookContent\n   * @param path {String} The path to the hook\n   * @return {String}\n   */\n  getHookContent: function (path) {\n\n    if (fs.existsSync(path)) {\n      return fs.readFileSync(path, {encoding: 'utf-8'});\n    }\n  },\n\n  /**\n   * Validates that the language of given script matches the one\n   * the binding code will be generated in\n   * @method validateScriptLanguage\n   * @param script {String}\n   * @throws {Error} \n   */\n  validateScriptLanguage: function (script) {\n\n      if (!this.isValidScriptLanguage(script, this.options.hashbang)) {\n        throw new Error('ERR_INVALID_SCRIPT_LANGUAGE');\n      }\n  },\n\n  /**\n   * Checks that content of given hook is written in the appropriate scripting\n   * language, checking if it starts with the appropriate hashbang\n   * @method isValidScriptLanguage\n   * @param hookContent {String}\n   * @param hashbang {String}\n   * @return {Boolean}\n   */\n  isValidScriptLanguage: function(hookContent, hashbang) {\n\n    var firstLine = hookContent.split('\\n')[0];\n    return firstLine.indexOf(hashbang) !== -1;\n  },\n\n  /**\n   * Checks if given code has marker for inserting the binding code\n   * @method hasMarkers\n   * @param existingCode {String}\n   * @return {Boolean}\n   */\n  hasMarkers: function(existingCode) {\n\n    return this.markerRegExp.test(existingCode);\n  },\n\n  /**\n   * Creates the code that will run the grunt task from the hook\n   * @method createBindingCode\n   * @param task {String}\n   * @param templatePath {Object}\n   */\n  createBindingCode: function () {\n\n    var template = this.loadTemplate(this.options.template);\n    var bindingCode = template({\n      hook: this.hookName,\n      command: this.options.command,\n      task: this.taskNames,\n      preventExit: this.options.preventExit,\n      args: this.options.args,\n      gruntfileDirectory: process.cwd(),\n      options: this.options\n    });\n\n    return this.options.startMarker + '\\n' + bindingCode + '\\n' + this.options.endMarker;\n  },\n\n  /**\n   * Loads template at given path\n   * @method loadTemplate\n   * @param templatePath {String}\n   * @return {Function}\n   */\n  loadTemplate: function () {\n\n    var template = fs.readFileSync(this.options.template, {\n      encoding: 'utf-8'\n    });\n\n    return handlebars.compile(template);\n  },\n\n  /**\n   * Appends code binding the given task to given existing code\n   * @method appendBindingCode\n   * @param existingCode {String}\n   * @return {String}\n   */\n  appendBindingCode: function (existingCode) {\n\n    var bindingCode = this.createBindingCode();\n    return (existingCode || this.options.hashbang) +\n            '\\n\\n' +\n            bindingCode;\n  },\n\n  /**\n   * Inserts binding code at the position shown by markers in the given code\n   * @method insertBindingCode\n   * @param existingCode {String}\n   * @return {String}\n   */\n  insertBindingCode: function (existingCode) {\n\n    var bindingCode = this.createBindingCode();\n    return existingCode.replace(this.markerRegExp, bindingCode);\n  },\n};\n\n/**\n * The name of the hooks offered by Git\n * @property HOOK_NAMES\n * @type {Array}\n * @static\n */\nHook.HOOK_NAMES = [\n  // CLIENT HOOKS\n  'applypatch-msg',\n  'pre-applypatch',\n  'post-applypatch',\n  'pre-commit',\n  'prepare-commit-msg',\n  'commit-msg',\n  'post-commit',\n  'pre-rebase',\n  'pre-push',\n  'post-checkout',\n  'post-merge',\n  'post-rewrite',\n\n  // SERVER HOOKS\n  'pre-receive',\n  'update',\n  'post-receive',\n  'post-update',\n  'pre-auto-gc'\n];\n/**\n * Checks that given name is the name of a Git hook (see HOOK_NAMES for the list of Git hook names)\n * @method isNameOfAGitHook\n * @param name {String}\n * @return {Boolean}\n * @static\n */\nHook.isNameOfAGitHook = function(name) {\n  return Hook.HOOK_NAMES.indexOf(name) !== -1;\n};\n\nmodule.exports.Hook = Hook;\n"}